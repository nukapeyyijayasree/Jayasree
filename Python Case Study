CASE STUDY : PRODUCT APP 



class Product: 

    def __init__(self, pid, name, category, price):

        self.pid = pid

        self.name = name

        self.category = category

        self.price = price



class ProductManager:

    def __init__(self):

        self.products = []



    def add_product(self):

        pid = input("Enter Product ID: ")

        name = input("Enter Product Name: ")

        category = input("Enter Product Category: ")

        price = float(input("Enter Product Price: "))

        product = Product(pid, name, category, price)

        self.products.append(product)

        print("Product added successfully.")



    def update_product(self):

        pid = input("Enter Product ID to update: ")

        for product in self.products:

            if product.pid == pid:

                product.name = input("Enter new Product Name: ")

                product.category = input("Enter new Product Category: ")

                product.price = float(input("Enter new Product Price: "))

                print("Product updated successfully.")

                return

        print("Product not found.")



    def delete_product(self):

        pid = input("Enter Product ID to delete: ")

        for product in self.products:

            if product.pid == pid:

                self.products.remove(product)

                print("Product deleted successfully.")

                return

        print("Product not found.")



    def get_product_by_pid(self):

        pid = input("Enter Product ID: ")

        for product in self.products:

            if product.pid == pid:

                print(f"Product ID: {product.pid}, Name: {product.name}, Category: {product.category}, Price: {product.price}")

                return

        print("Product not found.")



    def get_all_products(self):

        if not self.products:

            print("No products available.")

        else:

            for product in self.products:

                print(f"Product ID: {product.pid}, Name: {product.name}, Category: {product.category}, Price: {product.price}")



    def get_products_by_category(self):

        category = input("Enter Category: ")

        filtered_products = [product for product in self.products if product.category == category]

        if filtered_products:

            for product in filtered_products:

                print(f"Product ID: {product.pid}, Name: {product.name}, Price: {product.price}")

        else:

            print(f"No products found in the '{category}' category.")



    def get_products_between_prices(self):

        min_price = float(input("Enter minimum price: "))

        max_price = float(input("Enter maximum price: "))

        filtered_products = [product for product in self.products if min_price <= product.price <= max_price]

        if filtered_products:

            for product in filtered_products:

                print(f"Product ID: {product.pid}, Name: {product.name}, Category: {product.category}, Price: {product.price}")

        else:

            print(f"No products found between {min_price} and {max_price}.")



def main():

    manager = ProductManager()



    while True:

        print("\n1. Add Product")

        print("2. Update Product")

        print("3. Delete Product")

        print("4. Get Product By ID")

        print("5. Get All Products")

        print("6. Get Products By Category")

        print("7. Get Products Between Prices")

        print("8. Exit")

        

        choice = input("Enter your choice: ")



        if choice == '1':

            manager.add_product()

        elif choice == '2':

            manager.update_product()

        elif choice == '3':

            manager.delete_product()

        elif choice == '4':

            manager.get_product_by_pid()

        elif choice == '5':

            manager.get_all_products()

        elif choice == '6':

            manager.get_products_by_category()

        elif choice == '7':

            manager.get_products_between_prices()

        elif choice == '8':

            print("Exiting...")

            break

        else:

            print("Invalid choice, please try again.")

if __name__ == "__main__":

    main()

